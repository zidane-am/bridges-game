import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.concurrent.ThreadLocalRandom;
import java.util.Random;
import javax.swing.*;
import javax.swing.border.*;


public class app_gui {
    private JPanel feld = new JPanel();
    private JLayeredPane lpane = new JLayeredPane();
    private JButton button = new JButton();
    CirclePanel Circle = new CirclePanel();
    CirclePanel Spielfeld = new CirclePanel();
    JLabel textArea[][] = new JLabel[25][25];
    StrichPanel StrichP = new StrichPanel();
    private JCheckBox Fehlende;
    private JButton Auto;
    private JButton Naechste;
    public JLabel statusLabel = new JLabel("Das Rätsel is noch nicht gelöst!");
    
    private JButton Neues_Raetsel;
    private JButton Raetsel_neu_starten;
    private JButton Raetsel_laden;
    private JButton Raetsel_speichern;
    private JButton Raetsel_speichern_unter;
    private JButton Beenden;
    private JRadioButton autogroesse;
    private JCheckBox inseln;
    private JRadioButton festlegen;
    
    Color Transparent = new Color(0,0,0,0);
    
    public int i;
    public int j;
    public int max_i = 6;
    public int max_j = 6;
    public int inselmax[][] = new int[25][25];
    public int inselzahl[][] = new int[25][25];
    public int inselrest[][] = new int[25][25];
    public int strich[][][] = new int[25][25][4];
    public int uber[][] = new int[25][25];
    public int richtung[][] = new int[25][25];
    public int rectangle = 40;
    public int inselanzahl[][] = new int[25][25];
    public int other_q[][][] = new int[25][25][4];
    public int Bruecken_gesamt;
    public int Bruecken_gesetzt;
    public int Breite;
    public int Hoehe;
    public int Inseln;
    public int rand_B;
    public int rand_H;
    public int rand_I;
    public int rand_i;
    public int rand_j;
    public int zaehler = 0;
    public int Inselgrenze;
    Random rand = new Random();
    public int k;
    public int rand_q;
    public int and_q;
    public int rand_weite;
    public int rand_verb;
    public int ziel_i;
    public int ziel_j;
    public int l;
    public int min_i;
    public int zaehler2;
    public int runden;
    public int ueberlauf = 0;
    public int other_q1 = -1;
    public int other_q2 = -1;
    public int weite;
    
    public boolean zeichnen;
    public boolean abbruch;
    public boolean passt;
    public boolean clear = false;
    
    public static void main(String[] args) {
        new app_gui().Display();
    }

    private void Display() {
        JFrame frame = new JFrame("Titel");
        
        lpane = new JLayeredPane();       
        frame.add(lpane);
        
        button = new JButton("Datei");
        button.setPreferredSize(new Dimension(80,30));
        button.setBounds(5, 5, 80, 30);
        
        button.addActionListener(new ActionListener(){
        	public void actionPerformed(ActionEvent e){
        		JFrame Optionen = new JFrame("Optionen");
       		 	Box box2 = Box.createVerticalBox();
       		 	box2.setBackground(Color.WHITE);
        		Optionen.add(box2);
        		Neues_Raetsel = new JButton("Neues Rätsel");
        		box2.add(Neues_Raetsel);
        		box2.add(Box.createVerticalStrut(2));
        		Raetsel_neu_starten = new JButton("Rätsel neu starten");
        		box2.add(Raetsel_neu_starten);
        		box2.add(Box.createVerticalStrut(2));
        		Raetsel_laden = new JButton("Rätsel laden");
       		 	box2.add(Raetsel_laden);
       		 	box2.add(Box.createVerticalStrut(2));
       		 	Raetsel_speichern = new JButton("Rätsel speichern");
        		box2.add(Raetsel_speichern);
        		box2.add(Box.createVerticalStrut(2));
       		 	Raetsel_speichern_unter = new JButton("Rätsel speichern unter");
        		box2.add(Raetsel_speichern_unter);
        		box2.add(Box.createVerticalStrut(2));
        		Beenden = new JButton("Beenden");
       		 	box2.add(Beenden);
       		 	box2.add(Box.createVerticalStrut(1));
       		 	box2.setPreferredSize(new Dimension(250, 170));
       		 	Optionen.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
       		 	Optionen.pack();
        		Optionen.setVisible(true);
        		
        		Neues_Raetsel.addActionListener(new ActionListener(){
                    public void actionPerformed(ActionEvent e){
                    	
                    	JFrame Neues_Raetsel_PopUp = new JFrame("Neues Raetsel");
                       	Box box3 = Box.createVerticalBox();
                    	box3.setPreferredSize(new Dimension(300,180));
                    	Neues_Raetsel_PopUp.add(box3);
                    	Breite = 10;
                    	Hoehe = 10;
                    	Inseln = 25;
                    	autogroesse = new JRadioButton("Automatische Größe und Inselanzahl", true);
                    	festlegen = new JRadioButton("Größe / oder Inselanzahl selbst festlegen", false);
                    	ButtonGroup Neu = new ButtonGroup();
                    	Neu.add(autogroesse);
                    	Neu.add(festlegen);
                    	box3.add(autogroesse);
                    	box3.add(Box.createVerticalStrut(2));
                    	box3.add(festlegen);
                    	box3.add(Box.createVerticalStrut(2));
                    	JLayeredPane pane2 = new JLayeredPane();
                       	box3.add(pane2);
                       	box3.add(Box.createVerticalStrut(2));
                       	inseln = new JCheckBox("Inselanzahl festlegen", false);
                       	inseln.setBounds(30, 40, 200, 20);
                       	pane2.add(inseln);
                       	
                       	JLabel Text = new JLabel("Breite:");
                    	Text.setPreferredSize(new Dimension(100, 20));
                    	Text.setBounds(0, 0, 100, 20);
                    	Text.setHorizontalAlignment(JLabel.CENTER);
                    	pane2.add(Text);
                    	
                    	JTextField Text1 = new JTextField();
                    	Text1.setPreferredSize(new Dimension(100, 20));
                    	Text1.setBounds(100, 0, 100, 20);
                    	Text1.setText(""+Breite);
                    	pane2.add(Text1);
                    	
                    	JLabel Text2 = new JLabel("Höhe:");
                    	Text2.setPreferredSize(new Dimension(100, 20));
                    	Text2.setBounds(0, 20, 100, 20);
                    	Text2.setHorizontalAlignment(JLabel.CENTER);
                    	pane2.add(Text2);
                    	
                    	JTextField Text3 = new JTextField();
                    	Text3.setPreferredSize(new Dimension(100, 20));
                    	Text3.setBounds(100, 20, 100, 20);
                    	Text3.setText(""+Hoehe);
                    	pane2.add(Text3);
                    	
                    	JLabel Text4 = new JLabel("Inseln:");
                    	Text4.setPreferredSize(new Dimension(100, 20));
                    	Text4.setBounds(0, 60, 100, 20);
                    	Text4.setHorizontalAlignment(JLabel.CENTER);
                    	pane2.add(Text4);
                    	
                    	JTextField Text5 = new JTextField();
                    	Text5.setPreferredSize(new Dimension(100, 20));
                    	Text5.setBounds(100, 60, 100, 20);
                    	Text5.setText(""+Inseln);
                    	pane2.add(Text5);
                    	
                    	JButton Abbrechen = new JButton("Abbrechen");
                    	Abbrechen.setPreferredSize(new Dimension(100, 20));
                    	Abbrechen.setBounds(20, 100, 100, 20);
                    	pane2.add(Abbrechen);
                    	
                    	Abbrechen.addActionListener(new ActionListener(){
                            public void actionPerformed(ActionEvent e){
                            	Neues_Raetsel_PopUp.dispose();
                            }
                         });
                    	
                    	JButton OK = new JButton("OK");
                    	OK.setPreferredSize(new Dimension(100, 20));
                    	OK.setBounds(180, 100, 100, 20);
                    	pane2.add(OK);
                    	
                    	OK.addActionListener(new ActionListener(){
                            public void actionPerformed(ActionEvent e){
                            	if(autogroesse.isSelected()){
                            		Bruecken_gesetzt = 0;
                                	statusLabel.setText("Das Rätsel ist noch nicht gelöst!");
                            		rand_H = rand.nextInt(20) + 5;
                            		rand_B = rand.nextInt(20) + 5;
                            		Inselgrenze = (2*rand_H*rand_B/10)-3;
                            		rand_I = rand.nextInt(Inselgrenze) + 3;
                            		max_i = rand_B;
                            		max_j = rand_H;
                            		
                            		//
                            		max_i = 10;
                            		max_j = 10;
                            		//
                            		                            		                          		
                            		for(i=0;i<max_i;i++){
                            			for(j=0;j<max_j;j++){
                            				//System.out.println("ok"+i+j);
                            				
                            				uber[i][j] = 0;
                                			richtung[i][j] = 0;
                                			inselmax[i][j] = 0;
                                			inselzahl[i][j] = 0;
                                			inselanzahl[i][j] = 0;
                                			
                                			textArea[i][j].setBounds(5+(i*rectangle),40+(j*rectangle),rectangle,rectangle);
                                			textArea[i][j].setBackground(Transparent);
                                			textArea[i][j].setText(""+inselzahl[i][j]);
                	    					textArea[i][j].setBorder(new LineBorder(Transparent));
                	    					textArea[i][j].setHorizontalAlignment(JLabel.CENTER);
                        					textArea[i][j].setVerticalAlignment(JLabel.CENTER);
                        					textArea[i][j].setVisible(false);
                                			for(k=0;k<4;k++){
                                				strich[i][j][k] = 0;
                                				other_q[i][j][k] = 0;
                                			}	
                                		}
                            		}
                            		
                            		feld.setPreferredSize(new Dimension(max_i*rectangle, (max_j*rectangle)+150));
                                    feld.setBounds(0, 0, max_i*rectangle + 50, (max_j*rectangle)+150);
                                	
                                	Spielfeld.setPreferredSize(new Dimension(max_i*rectangle, max_j*rectangle));
                                    Spielfeld.setBounds(5, 40, max_i*rectangle, max_j*rectangle);
                                                            
                                    Fehlende.setBounds(5, 45 + max_j*rectangle, 240, 30);
                                    
                                    Auto.setBounds(5, 80 + max_j*rectangle, 140, 30);
                                    
                                    Naechste.setBounds(160, 80 + max_j*rectangle, 140, 30);
                                                            
                                    statusLabel.setBounds(5, 110 + max_j*rectangle, 200, 30);
                                    
                                    frame.setSize(max_i*rectangle+30, 180 + max_j*rectangle);
                                    
                                    rand_I = 3;
                                    zaehler = 0;
                                    zaehler2 = 0;
                                    passt = true;
                                    //System.out.println(""+max_i+"/"+max_j);
                                    rand_i = rand.nextInt(max_i) + 0;
                                	rand_j = rand.nextInt(max_j) + 0;
                                    
                                	while(zaehler < rand_I && zaehler2 < 1){
                                    	rand_q = rand.nextInt(4) + 0;
                                    	passt = true;
                                    	if(rand_q == 0 && rand_j > 0){
                                    		if(rand_j == 1){
                                    			rand_weite = 1;
                                    		}else{
                                    			rand_weite = rand.nextInt(rand_j) + 1;
                                    		}
                                    		ziel_i = rand_i;
                                    		ziel_j = rand_j - rand_weite;
                                    		for(l=ziel_j;l<rand_j+1;l++){
                                    			if(uber[rand_i][l] != 0){
                                    				passt = false;
                                    			}
                                    		}
                                    	}
                                    	if(rand_q == 1 && rand_i < max_i){
                                    		if(rand_i == max_i - 1){
                                    			rand_weite = 1;
                                    		}else{
                                    			rand_weite = rand.nextInt(max_i - rand_i) + 1;
                                    		}
                                    		ziel_i = rand_i + rand_weite;
                                    		ziel_j = rand_j;
                                    		for(l=rand_i;l<ziel_i+1;l++){
                                    			if(uber[l][rand_j] != 0){
                                    				passt = false;
                                    			}
                                    		}
                                    	}
                                    	if(rand_q == 2 && rand_j < max_j){
                                    		if(rand_j == max_j - 1){
                                    			rand_weite = 1;
                                    		}else{
                                    			rand_weite = rand.nextInt(max_j - rand_j) + 1;
                                    		}
                                    		ziel_i = rand_i;
                                    		ziel_j = rand_j + rand_weite;
                                    		for(l=rand_j;l<ziel_j+1;l++){
                                    			if(uber[rand_i][l] != 0){
                                    				passt = false;
                                    			}
                                    		}
                                    	}
                                    	if(rand_q == 3 && rand_i > 0){
                                    		if(rand_i == 1){
                                    			rand_weite = 1;
                                    		}else{
                                    			rand_weite = rand.nextInt(rand_i) + 1;
                                    		}
                                    		ziel_i = rand_i - rand_weite;
                                    		ziel_j = rand_j;
                                    		for(l=ziel_i;l<rand_i;l++){
                                    			if(uber[l][rand_j] != 0){
                                    				passt = false;
                                    			}
                                    		}
                                    	}else{
                                    		passt = false;
                                    	}
                                    	
                                    	if(passt == true){
                                    		rand_verb = rand.nextInt(1) + 1;
                                    		if(inselmax[ziel_i][ziel_j] == 0){
                                    			inselmax[ziel_i][ziel_j] = rand_verb;
                                    			inselrest[ziel_i][ziel_j] = rand_verb;
                                    			inselzahl[ziel_i][ziel_j] = rand_verb;
                                    			textArea[ziel_i][ziel_j].setText(""+inselzahl[ziel_i][ziel_j]);
                                    			textArea[ziel_i][ziel_j].setVisible(true);
                                    			
                                    		}else if(inselmax[ziel_i][ziel_j] > 0){
                                    			inselmax[ziel_i][ziel_j] = inselmax[ziel_i][ziel_j] + rand_verb;
                                    			inselrest[ziel_i][ziel_j] = inselrest[ziel_i][ziel_j] + rand_verb;
                                    			inselzahl[ziel_i][ziel_j] = inselzahl[ziel_i][ziel_j] + rand_verb;
                                    			textArea[ziel_i][ziel_j].setText(""+inselzahl[ziel_i][ziel_j]);
                                    		}
                                    		
                                    		if(rand_q == 0){
                                    			strich[rand_i][rand_j][0] = rand_verb;
                                    			strich[ziel_i][ziel_j][2] = rand_verb;
                                    			for(l=ziel_j+1;l<rand_j;l++){
                                    				uber[rand_i][l] = rand_verb;
                                    				richtung[rand_i][l] = 2;
                                    			}
                                    		}	
                                    		if(rand_q == 1){
                                    			strich[rand_i][rand_j][1] = rand_verb;
                                    			strich[ziel_i][ziel_j][3] = rand_verb;
                                    			for(l=rand_i+1;l<ziel_i;l++){
                                    				uber[l][rand_j] = rand_verb;
                                    				richtung[l][rand_j] = 1;
                                    			}
                                    		}
                                    		if(rand_q == 2){
                                    			strich[rand_i][rand_j][2] = rand_verb;
                                    			strich[ziel_i][ziel_j][0] = rand_verb;
                                    			for(l=rand_j+1;l<ziel_j;l++){
                                    				uber[rand_i][l] = rand_verb;
                                    				richtung[rand_i][l] = 2;
                                    			}
                                    		}
                                    		if(rand_q == 3){
                                    			strich[rand_i][rand_j][3] = rand_verb;
                                    			strich[ziel_i][ziel_j][1] = rand_verb;
                                    			for(l=ziel_i+1;l<rand_i;l++){
                                    				uber[l][rand_j] = rand_verb;
                                    				richtung[l][rand_j] = 1;
                                    			}
                                    		}
                                    		Circle.revalidate();
                                    		StrichP.revalidate();
                                    		
                                    	}
                                    	System.out.println("i:"+rand_i+"j:"+rand_j+"q:"+rand_q+"w:"+rand_weite);
                                    	System.out.println("zi:"+ziel_i+"zj:"+ziel_j);
                                    	if(passt == true){
                                    		System.out.println("passt");
                                    		zaehler = zaehler + 1;
                                    		rand_i = ziel_i;
                                    		rand_j = ziel_j;
                                    	}
                                    	zaehler2 = zaehler2 + 1;
                                    	passt = true;
                                    	
                                    	inselmax[1][1] = 1;
                                    	strich[1][1][0] = 1;
                                    	Circle.revalidate();
                                		StrichP.revalidate();
                                    	
                                    }//while loop endet
                            		
                            	}// auto selected endet
                            	
                            	
                            	
                            	//Neues_Raetsel_PopUp.dispose();
                            }
                         });    	
                       	
                       	Neues_Raetsel_PopUp.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                    	Neues_Raetsel_PopUp.pack();
                    	Neues_Raetsel_PopUp.setVisible(true);
                    }
                });
        		
        		Raetsel_neu_starten.addActionListener(new ActionListener(){
                    public void actionPerformed(ActionEvent e){
                    	Bruecken_gesetzt = 0;
                    	statusLabel.setText("Das Rätsel ist noch nicht gelöst!");
                    	
                    	for(i=0;i<max_i;i++){
                    		for(j=0;j<max_j;j++){
                    			inselanzahl[i][j] = 0;
                    			inselrest[i][j] = inselmax[i][j];
                    			uber[i][j] = 0;
                    			richtung[i][j] = 0;
                    			inselzahl[i][j] = inselmax[i][j];
                    			textArea[i][j].setText(""+inselzahl[i][j]);
                    			for(k=0;k<4;k++){
                    				strich[i][j][k] = 0;
                    			}
                    		}
                    	}
                    	
                    	
                    	
                    }
                });
        		
        		Raetsel_laden.addActionListener(new ActionListener(){
                    public void actionPerformed(ActionEvent e){
                    	
                    	max_i = rand.nextInt(20) + 5;
                    	max_j = rand.nextInt(20) + 5;
                    	
                    	max_i = 10;
                		max_j = 10;
                		clear = true;                         		                          		
                		for(i=0;i<25;i++){
                			for(j=0;j<25;j++){
                				inselmax[i][j] = 0;
                				inselzahl[i][j] = 0;
                				textArea[i][j].setText("");
                				textArea[i][j].setVisible(false);
                				uber[i][j] = 0;
                    			richtung[i][j] = 0;
                				for(k=0;k<4;k++){
                					strich[i][j][k] = 0;
                					StrichP.revalidate();
                				}
                				Circle.revalidate();
                			}
                		}
                		
                		clear = false;
                		
                		feld.setPreferredSize(new Dimension(max_i*rectangle, (max_j*rectangle)+150));
                        feld.setBounds(0, 0, max_i*rectangle + 50, (max_j*rectangle)+150);
                    	Spielfeld.setPreferredSize(new Dimension(max_i*rectangle, max_j*rectangle));
                        Spielfeld.setBounds(5, 40, max_i*rectangle, max_j*rectangle);
                        StrichP.setPreferredSize(new Dimension(max_i*rectangle, max_j*rectangle));
                        StrichP.setBounds(5, 40, max_i*rectangle, max_j*rectangle);
                        Fehlende.setBounds(5, 45 + max_j*rectangle, 240, 30);
                        Auto.setBounds(5, 80 + max_j*rectangle, 140, 30);
                        Naechste.setBounds(160, 80 + max_j*rectangle, 140, 30);
                        statusLabel.setBounds(5, 110 + max_j*rectangle, 200, 30);
                        frame.setSize(max_i*rectangle+30, 180 + max_j*rectangle);
                        
                    	rand_i = rand.nextInt(max_i);
                    	rand_j = rand.nextInt(max_j);
                    	Inselgrenze = (2*max_i*max_j/10) - 3;
                    	rand_I = rand.nextInt(Inselgrenze) + 3;
                    	runden = 0;
                    	
                    	while(runden < 1){
                    		rand_q = rand.nextInt(4);
                    		while(rand_q == and_q){
                    			rand_q = rand.nextInt(4);
                    		}
                    		rand_verb = rand.nextInt(2) + 1;
                    		passt = true;
                    		
                    		if(rand_q == 0 && rand_j > 0){
                    			ziel_i = rand_i;
                    			rand_weite = rand.nextInt(rand_j) + 1;
                    			ziel_j = rand_j - rand_weite;
                    			and_q = 2;
                    		}else if(rand_q == 1 && rand_i < max_i){
                    			ziel_j = rand_j;
                    			rand_weite = rand.nextInt(max_i - rand_i) + 1;
                    			ziel_i = rand_i + rand_weite;
                    			and_q = 3;
                    		}else if(rand_q == 2 && rand_j < max_j){
                    			ziel_i = rand_i;
                    			rand_weite = rand.nextInt(max_j - rand_j) + 1;
                    			ziel_j = rand_j + rand_weite;
                    			and_q = 0;
                    		}else if(rand_q == 3 && rand_i > 0){
                    			ziel_j = rand_j;
                    			rand_weite = rand.nextInt(rand_i) + 1;
                    			ziel_i = rand_i - rand_weite;
                    			and_q = 1;
                    		}else{
                    			passt = false;
                    		}
                    		
                    		if(passt == true){
                    			if(rand_q == 0){
                            		for(k=ziel_j;k<rand_j;k++){
                            			uber[rand_i][k] = rand_verb;
                            			richtung[rand_i][k] = 2;
                            		}
                            	}
                    			if(rand_q == 1){
                            		for(k=rand_i;k<ziel_i;k++){
                            			uber[k][rand_j] = rand_verb;
                            			richtung[k][rand_j] = 1;
                            		}
                            	}
                    			if(rand_q == 2){
                            		for(k=rand_j;k<ziel_j;k++){
                            			uber[rand_i][k] = rand_verb;
                            			richtung[rand_i][k] = 2;
                            		}
                            	}
                    			if(rand_q == 3){
                            		for(k=ziel_i;k<rand_i;k++){
                            			uber[k][rand_j] = rand_verb;
                            			richtung[k][rand_j] = 1;
                            		}
                            	}
                    			//R/L = 1; O/U = 2
                    			
                    			inselmax[rand_i][rand_j] = rand_verb;
                    			inselmax[ziel_i][ziel_j] = rand_verb;
                    			strich[rand_i][rand_j][rand_q] = rand_verb;
                    			strich[ziel_i][ziel_j][and_q] = rand_verb;
                    			inselzahl[rand_i][rand_j] = rand_verb;
                    			inselzahl[ziel_i][ziel_j] = rand_verb;
                    			textArea[rand_i][rand_j].setText(""+inselzahl[rand_i][rand_j]);
                        		textArea[rand_i][rand_j].setVisible(true);
                        		textArea[rand_i][rand_j].setBackground(Transparent);
                        		textArea[ziel_i][ziel_j].setText(""+inselzahl[rand_i][rand_j]);
                        		textArea[ziel_i][ziel_j].setVisible(true);
                        		textArea[ziel_i][ziel_j].setBackground(Transparent);
                        		lpane.add(textArea[rand_i][rand_j], BorderLayout.CENTER);
                            	lpane.setLayer(textArea[rand_i][rand_j], 3);
                            	lpane.add(textArea[ziel_i][ziel_j], BorderLayout.CENTER);
                            	lpane.setLayer(textArea[ziel_i][ziel_j], 3);
                            	
                            	System.out.println("i"+rand_i+"j"+rand_j+"q"+rand_q);
                            	
                            	
                    		}
                    		
                    		
                    		runden = runden + 1;
                    	}
                    	
                    	
                    	
                    	Circle.revalidate();
                		StrichP.revalidate();
                    	
                    }
                });
        		
        		Raetsel_speichern.addActionListener(new ActionListener(){
                    public void actionPerformed(ActionEvent e){
                    	passt = true;
                    	max_i = 10;
                    	max_j = 10;
                    	zaehler = 0;
                    	ueberlauf = 0;
                    	
                    	for(i=0;i<max_i;i++){
                			for(j=0;j<max_j;j++){
                				for(k=0;k<4;k++){
                					other_q[i][j][k] = 0;
                				}
                			}
                		}
                    	
                    	for(i=0;i<max_i;i++){
                			other_q[i][0][0] = 1;
                			other_q[0][i][3] = 1;
                			other_q[max_i-1][i][1] = 1;
                			other_q[i][max_j-1][2] = 1;
                		}
                    	
                    	for(i=0;i<25;i++){
                			for(j=0;j<25;j++){
                				inselmax[i][j] = 0;
                				inselzahl[i][j] = 0;
                				textArea[i][j].setText("");
                				textArea[i][j].setVisible(false);
                				uber[i][j] = 0;
                    			richtung[i][j] = 0;
                				for(k=0;k<4;k++){
                					strich[i][j][k] = 0;
                					StrichP.revalidate();
                				}
                				Circle.revalidate();
                			}
                		}
                    	
                    	feld.setPreferredSize(new Dimension(max_i*rectangle, (max_j*rectangle)+150));
                        feld.setBounds(0, 0, max_i*rectangle + 50, (max_j*rectangle)+150);
                    	Spielfeld.setPreferredSize(new Dimension(max_i*rectangle, max_j*rectangle));
                        Spielfeld.setBounds(5, 40, max_i*rectangle, max_j*rectangle);
                        StrichP.setPreferredSize(new Dimension(max_i*rectangle, max_j*rectangle));
                        StrichP.setBounds(5, 40, max_i*rectangle, max_j*rectangle);
                        Fehlende.setBounds(5, 45 + max_j*rectangle, 240, 30);
                        Auto.setBounds(5, 80 + max_j*rectangle, 140, 30);
                        Naechste.setBounds(160, 80 + max_j*rectangle, 140, 30);
                        statusLabel.setBounds(5, 110 + max_j*rectangle, 200, 30);
                        frame.setSize(max_i*rectangle+30, 180 + max_j*rectangle);
                        
                    	rand_i = rand.nextInt(max_i);
                    	rand_j = rand.nextInt(max_j);
                    	
                    	                		
                	while(zaehler < 2 && ueberlauf < 5){
                		passt = true;
                		rand_verb = rand.nextInt(2) + 1;
                		rand_q = rand.nextInt(4);
                		
                		while(rand_q == and_q || other_q[rand_i][rand_j][rand_q] == 1){
                			rand_q = rand.nextInt(4);
                		}
                		
                		if(rand_q == 0 && rand_j > 0){
                			ziel_i = rand_i;
                			rand_weite = rand.nextInt(rand_j) + 1;
                			ziel_j = rand_j - rand_weite;
                			and_q = 2;
                		}else if(rand_q == 1 && rand_i < (max_i - 1)){
                			ziel_j = rand_j;
                			rand_weite = rand.nextInt(max_i - rand_i - 1) + 1;
                			ziel_i = rand_i + rand_weite;
                			and_q = 3;
                		}else if(rand_q == 2 && rand_j < (max_j - 1)){
                			ziel_i = rand_i;
                			rand_weite = rand.nextInt(max_j - rand_j - 1) + 1;
                			ziel_j = rand_j + rand_weite;
                			and_q = 0;
                		}else if(rand_q == 3 && rand_i > 0 ){
                			ziel_j = rand_j;
                			rand_weite = rand.nextInt(rand_i) + 1;
                			ziel_i = rand_i - rand_weite;
                			and_q = 1;
                		}else{
                			passt = false;
                			System.out.println("passt = false "+"/q"+rand_q+"/ other_q"+other_q[rand_i][rand_j][rand_q]);
                			ueberlauf = ueberlauf + 1;
                		}
                		
                		if(passt == true){
                		    if(rand_q == 0 && ziel_j > -1){
                				for(k=ziel_j+1;k<rand_j;k++){
                					uber[rand_i][k] = rand_verb;
                					richtung[rand_i][k] = 2;
                					//System.out.println("zelle:"+rand_i+k+"u"+uber[rand_i][k]+"r"+richtung[rand_i][k]);
                				}
                			}else if(rand_q == 1 && ziel_i < max_i){
                				for(k=rand_i+1;k<ziel_i;k++){
                					uber[k][rand_j] = rand_verb;
                					richtung[k][rand_j] = 1;
                    				//System.out.println("zelle:"+k+rand_j+"u"+uber[k][rand_j]+"r"+richtung[k][rand_j]);
                				}
                			}else if(rand_q == 2 && ziel_j < max_j){
                				for(k=rand_j+1;k<ziel_j;k++){
                					uber[rand_i][k] = rand_verb;
                					richtung[rand_i][k] = 2;
                					//System.out.println("zelle:"+rand_i+k+"u"+uber[rand_i][k]+"r"+richtung[rand_i][k]);
                				}
                			}else if(rand_q == 3 && ziel_i > -1){
                				for(k=ziel_i+1;k<rand_i;k++){
                					uber[k][rand_j] = rand_verb;
                					richtung[k][rand_j] = 1;
                					//System.out.println("zelle:"+k+rand_j+"u"+uber[k][rand_j]+"r"+richtung[k][rand_j]);
                				}
                			}else{
                				passt = false;
                				ueberlauf = ueberlauf + 1;
                			}
                		}
                		
                		//System.out.println(""+passt+"/q"+rand_q);
                		
                		if(zaehler == 0 && passt == false){
                			for(i=0;i<max_i;i++){
                				for(j=0;j<max_j;j++){
                					inselmax[i][j] = 0;
                					richtung[i][j] = 0;
                					uber[i][j] = 0;
                					textArea[i][j].setVisible(false);
                					for(k=0;k<4;k++){
                						strich[i][j][k] = 0;
                					}
                				}
                			}
                			Circle.revalidate();
                			StrichP.revalidate();
                			System.out.println("Fehler!");
                		}else if(passt = true){
                			
                			if(inselmax[rand_i][rand_j] == 0){
                				inselmax[rand_i][rand_j] = rand_verb;
                			}else{
                				inselmax[rand_i][rand_j] = inselmax[rand_i][rand_j] + rand_verb;
                			}
                			
                			if(inselmax[ziel_i][ziel_j] == 0){
                				inselmax[ziel_i][ziel_j] = rand_verb;
                			}else{
                				inselmax[ziel_i][ziel_j] = inselmax[ziel_i][ziel_j] + rand_verb;
                			}
                			
                			
                			strich[rand_i][rand_j][rand_q] = rand_verb;
                			strich[ziel_i][ziel_j][and_q] = rand_verb;
                			inselzahl[rand_i][rand_j] = inselmax[rand_i][rand_j];
                			inselzahl[ziel_i][ziel_j] = inselmax[ziel_i][ziel_j];
                			textArea[rand_i][rand_j].setText(""+inselzahl[rand_i][rand_j]);
                			textArea[rand_i][rand_j].setVisible(true);
                			textArea[rand_i][rand_j].setBackground(Transparent);
                			textArea[ziel_i][ziel_j].setText(""+inselzahl[ziel_i][ziel_j]);
                			textArea[ziel_i][ziel_j].setVisible(true);
                			textArea[ziel_i][ziel_j].setBackground(Transparent);
                			lpane.add(textArea[rand_i][rand_j], BorderLayout.CENTER);
                			lpane.setLayer(textArea[rand_i][rand_j], 3);
                			lpane.add(textArea[ziel_i][ziel_j], BorderLayout.CENTER);
                			lpane.setLayer(textArea[ziel_i][ziel_j], 3);
                			zaehler = zaehler + 1;
                			
                			System.out.println("R"+zaehler+"/i"+rand_i+"/j"+rand_j+"/"+"zi"+ziel_i+"/zj"+ziel_j+"/"+"/q"+rand_q+"/and_q"+and_q);
                			
                			rand_i = ziel_i;
                			rand_j = ziel_j;
                			
                		}else if(passt == false){
                			
                		}
                		
                	}//hier endet der while loop
                	
                	
                    }//hier endet der Action Listener
                });
        		
        		Raetsel_speichern_unter.addActionListener(new ActionListener(){
                    public void actionPerformed(ActionEvent e){
                    	System.out.println("");
                    	for(i=0;i<max_i;i++){
                    		System.out.print(""+other_q[i][0][0]);
                    	}
                    	System.out.println("");
                    	for(i=0;i<max_i;i++){
                    		System.out.print(""+other_q[max_i-1][i][1]);
                    	}
                    	System.out.println("");
                    	for(i=0;i<max_i;i++){
                    		System.out.print(""+other_q[i][max_j-1][2]);
                    	}
                    	System.out.println("");
                    	for(i=0;i<max_i;i++){
                    		System.out.print(""+other_q[0][i][3]);
                    	}
                    	
                    	
                    }
                });
        		
        		Beenden.addActionListener(new ActionListener(){
                    public void actionPerformed(ActionEvent e){
                        Optionen.dispose();
                    }
                });
        	}
        });
        
        lpane.add(button);
        lpane.setLayer(button, 1);
        
        feld = new JPanel();
        feld.setBackground(Color.WHITE);
        feld.setPreferredSize(new Dimension(500, 500));
        feld.setBounds(0, 0, 500, 500);
        
        lpane.add(feld);
        lpane.setLayer(feld, 0);
        
        Bruecken_gesamt = 0;
        
        for(i=0;i<max_i;i++){
        	for(j=0;j<max_j;j++){
        		inselmax[i][j] = 0;
        		inselanzahl[i][j] = 0;
        		Bruecken_gesamt = Bruecken_gesamt + inselmax[i][j];
        	}
        }
        
        Bruecken_gesetzt = 0;
        inselmax[1][1] = 1;
        inselmax[1][3] = 1;
        inselmax[3][1] = 2;
        inselmax[3][3] = 2;
        
        /*
        strich[1][1][2] = 1;
        uber[0][0] = 1;
        uber[1][0] = 1;
        uber[2][0] = 2;
        uber[3][0] = 2;
        richtung[0][0] = 1;
        richtung[1][0] = 2;
        richtung[2][0] = 1;
        richtung[3][0] = 2;
        */
        
        Spielfeld = new CirclePanel();
        Spielfeld.setBackground(Color.WHITE);
        Spielfeld.setBorder(new LineBorder(Color.BLACK));
        Spielfeld.setPreferredSize(new Dimension(max_i*rectangle, max_j*rectangle));
        Spielfeld.setBounds(5, 40, max_i*rectangle, max_j*rectangle);
        
        lpane.add(Spielfeld);
        lpane.setLayer(Spielfeld, 2);
        
        for(i=0;i<25;i++){
			for(j=0;j<25;j++){
				textArea[i][j] = new JLabel();
				textArea[i][j].setVisible(false);
				textArea[i][j].setBounds(5+(i*rectangle),40+(j*rectangle),rectangle,rectangle);
        	    textArea[i][j].setBackground(Transparent);
        	    textArea[i][j].setBorder(new LineBorder(Transparent));
        	    textArea[i][j].setHorizontalAlignment(JLabel.CENTER);
                textArea[i][j].setVerticalAlignment(JLabel.CENTER);
                for(k=0;k<4;k++){
                	strich[i][j][k] = 0;
                }
			}
		}
        
        for(i=0;i<max_i;i++){
        	for(j=0;j<max_j;j++){
        		inselzahl[i][j] = inselmax[i][j];
        	    inselrest[i][j] = inselmax[i][j];
        	    
        	    if(inselmax[i][j] > 0){textArea[i][j].setVisible(true);}
        	    
        	    textArea[i][j].setText(""+inselzahl[i][j]);
        	    lpane.add(textArea[i][j], BorderLayout.CENTER);
                lpane.setLayer(textArea[i][j], 3);
        	}
        }
        
        for(i=0;i<max_i;i++){
			other_q[i][0][0] = 1;
			other_q[0][i][3] = 1;
			other_q[max_i-1][i][1] = 1;
			other_q[i][max_j-1][2] = 1;
		}
        
        StrichP = new StrichPanel();
        StrichP.setBorder(new LineBorder(Transparent));
        StrichP.setLayout(new BorderLayout());
        StrichP.setBounds(5,40,max_i*rectangle,max_j*rectangle);
        StrichP.setBackground(Color.BLUE);
        StrichP.setOpaque(false);
        StrichP.setVisible(true);
        lpane.add(StrichP);
        lpane.setLayer(StrichP, 4);
        
        Fehlende = new JCheckBox("Anzahl fehlender Brücken anzeigen");
        Fehlende.setPreferredSize(new Dimension(240,30));
        Fehlende.setBackground(Color.WHITE);
        Fehlende.setBounds(5, 45 + max_j*rectangle, 240, 30);
        
        lpane.add(Fehlende);
        lpane.setLayer(Fehlende, 1);
        
        Auto = new JButton("Automatisch lösen");
        Auto.setPreferredSize(new Dimension(140,30));
        Auto.setBounds(5, 80 + max_j*rectangle, 140, 30);
        
        Auto.addActionListener(new ActionListener(){
        	public void actionPerformed(ActionEvent e){
        		
        	}
        });
        
        lpane.add(Auto);
        lpane.setLayer(Auto, 1);
        
        Naechste = new JButton("Nächste Brücke");
        Naechste.setPreferredSize(new Dimension(140,30));
        Naechste.setBounds(160, 80 + max_j*rectangle, 140, 30);
        
        Naechste.addActionListener(new ActionListener(){
        	public void actionPerformed(ActionEvent e){
        		
        	}
        });
        
        lpane.add(Naechste);
        lpane.setLayer(Naechste, 1);
        
        statusLabel = new JLabel("Das Rätsel ist noch nicht gelöst!");
        statusLabel.setPreferredSize(new Dimension(200,30));
        statusLabel.setBounds(5, 110 + max_j*rectangle, 200, 30);
        
        lpane.add(statusLabel);
        lpane.setLayer(statusLabel, 1);
                        
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setPreferredSize(new Dimension(max_i*rectangle+30, 90+max_j*rectangle));
        frame.setVisible(true);
        if((max_i*rectangle+30) < 330){
        	min_i = 330;
        }else{
        	min_i = max_i*rectangle+30;
        }
        frame.setSize(min_i, 180 + max_j*rectangle);
    }  
    
    
    class CirclePanel extends JPanel{
        public void paintComponent(Graphics g){
            int diameter = rectangle*2/5;
            super.paintComponent(g);
            Color redColor = new Color(255,51,51);
            g.setColor(redColor);
            if(clear == true){
            	g.clearRect(0,0, this.getWidth(), this.getHeight());
            }
            for(i=0;i<max_i;i++){
                for(j=0;j<max_j;j++){
                    if(inselmax[i][j] > 0){
                        g.fillOval((3*rectangle/10)+(i*rectangle), (3*rectangle/10)+(j*rectangle), diameter, diameter);
                    }
                }
            }
        }
    }
    
    class StrichPanel extends JPanel{
        public void paintComponent (Graphics h){
            super.paintComponent(h);
            h.setColor(Color.BLACK);
            if(clear == true){
            	h.clearRect(0,0, this.getWidth(), this.getHeight());
            }
            for(i=0;i<max_i;i++){
            	for(j=0;j<max_j;j++){
            	if(inselmax[i][j] > 0){
            		
            		if(strich[i][j][0] == 1){
            			h.drawLine(i*rectangle+rectangle/2, j*rectangle, i*rectangle+rectangle/2, j*rectangle+rectangle/2-rectangle/5);
            			//System.out.println("strich2:"+i+j);
            		}
            		if(strich[i][j][1] == 1){
            			h.drawLine(i*rectangle+rectangle/2+rectangle/5, j*rectangle+rectangle/2, (i+1)*rectangle,j*rectangle+rectangle/2);
            		}
            		if(strich[i][j][2] == 1){
            			h.drawLine(i*rectangle+rectangle/2, j*rectangle+rectangle*7/10, i*rectangle+rectangle/2, (j+1)*rectangle);
            		}
            		if(strich[i][j][3] == 1){
            			h.drawLine(i*rectangle, j*rectangle+rectangle/2, i*rectangle+rectangle*3/10, j*rectangle+rectangle/2);
            		}
            		if(strich[i][j][0] == 2){
            			h.drawLine(i*rectangle+rectangle/2-1, j*rectangle, i*rectangle+rectangle/2-1, j*rectangle+rectangle/2-rectangle/5);            
                        h.drawLine(i*rectangle+rectangle/2+1, j*rectangle, i*rectangle+rectangle/2+1, j*rectangle+rectangle/2-rectangle/5); 
            		}
            		if(strich[i][j][1] == 2){
            			h.drawLine(i*rectangle+rectangle/2+rectangle/5, j*rectangle+rectangle/2-1, (i+1)*rectangle,j*rectangle+rectangle/2-1);
                        h.drawLine(i*rectangle+rectangle/2+rectangle/5, j*rectangle+rectangle/2+1, (i+1)*rectangle,j*rectangle+rectangle/2+1);
            		}
            		if(strich[i][j][2] == 2){
            			h.drawLine(i*rectangle+rectangle/2-1, j*rectangle+rectangle*7/10, i*rectangle+rectangle/2-1, (j+1)*rectangle);
                        h.drawLine(i*rectangle+rectangle/2+1, j*rectangle+rectangle*7/10, i*rectangle+rectangle/2+1, (j+1)*rectangle);
            		}
            		if(strich[i][j][3] == 2){
            			h.drawLine(i*rectangle, j*rectangle+rectangle/2-1, i*rectangle+rectangle*3/10, j*rectangle+rectangle/2-1);
                        h.drawLine(i*rectangle, j*rectangle+rectangle/2+1, i*rectangle+rectangle*3/10, j*rectangle+rectangle/2+1);
            		}
            	}else if(inselmax[i][j] == 0){
            		//richtung: 1=R/L 2=O/U
            		if(uber[i][j] == 1 && richtung[i][j] == 1){
                        h.drawLine(i*rectangle, j*rectangle+rectangle/2, (i+1)*rectangle, j*rectangle+rectangle/2);
                    }
                    if(uber[i][j] == 2 && richtung[i][j] == 1){
                        h.drawLine(i*rectangle, j*rectangle+rectangle/2-1, (i+1)*rectangle, j*rectangle+rectangle/2-1);
            			h.drawLine(i*rectangle, j*rectangle+rectangle/2+1, (i+1)*rectangle, j*rectangle+rectangle/2+1);
                    }
                    if(uber[i][j] == 1 && richtung[i][j] == 2){
                        h.drawLine(i*rectangle+rectangle/2, j*rectangle, i*rectangle+rectangle/2, (j+1)*rectangle);
                    }
                    if(uber[i][j] == 2 && richtung[i][j] == 2){
                       	h.drawLine(i*rectangle+rectangle/2-1, j*rectangle, i*rectangle+rectangle/2-1, (j+1)*rectangle);
            		   	h.drawLine(i*rectangle+rectangle/2+1, j*rectangle, i*rectangle+rectangle/2+1, (j+1)*rectangle);
                    }
            	}
            	}
            }
        }
    }
    
    //Ende
}




